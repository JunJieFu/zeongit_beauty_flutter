// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:zeongitbeautyflutter/assets/entity/user_info_entity.dart';
import 'package:zeongitbeautyflutter/generated/json/user_info_entity_helper.dart';
import 'package:zeongitbeautyflutter/assets/entity/page_user_info_entity.dart';
import 'package:zeongitbeautyflutter/generated/json/page_user_info_entity_helper.dart';
import 'package:zeongitbeautyflutter/assets/entity/picture_entity.dart';
import 'package:zeongitbeautyflutter/generated/json/picture_entity_helper.dart';
import 'package:zeongitbeautyflutter/assets/entity/page_picture_entity.dart';
import 'package:zeongitbeautyflutter/generated/json/page_picture_entity_helper.dart';
import 'package:zeongitbeautyflutter/assets/entity/pageable_entity.dart';
import 'package:zeongitbeautyflutter/generated/json/pageable_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UserInfoEntity:
			return userInfoEntityFromJson(data as UserInfoEntity, json) as T;			case PageUserInfoEntity:
			return pageUserInfoEntityFromJson(data as PageUserInfoEntity, json) as T;			case PictureEntity:
			return pictureEntityFromJson(data as PictureEntity, json) as T;			case PagePictureEntity:
			return pagePictureEntityFromJson(data as PagePictureEntity, json) as T;			case PageableEntity:
			return pageableEntityFromJson(data as PageableEntity, json) as T;			case PagePageable:
			return pagePageableFromJson(data as PagePageable, json) as T;			case PageSort:
			return pageSortFromJson(data as PageSort, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case UserInfoEntity:
			return userInfoEntityToJson(data as UserInfoEntity);			case PageUserInfoEntity:
			return pageUserInfoEntityToJson(data as PageUserInfoEntity);			case PictureEntity:
			return pictureEntityToJson(data as PictureEntity);			case PagePictureEntity:
			return pagePictureEntityToJson(data as PagePictureEntity);			case PageableEntity:
			return pageableEntityToJson(data as PageableEntity);			case PagePageable:
			return pagePageableToJson(data as PagePageable);			case PageSort:
			return pageSortToJson(data as PageSort);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'UserInfoEntity':
			return UserInfoEntity().fromJson(json);			case 'PageUserInfoEntity':
			return PageUserInfoEntity().fromJson(json);			case 'PictureEntity':
			return PictureEntity().fromJson(json);			case 'PagePictureEntity':
			return PagePictureEntity().fromJson(json);			case 'PageableEntity':
			return PageableEntity().fromJson(json);			case 'PagePageable':
			return PagePageable().fromJson(json);			case 'PageSort':
			return PageSort().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'UserInfoEntity':
			return List<UserInfoEntity>();			case 'PageUserInfoEntity':
			return List<PageUserInfoEntity>();			case 'PictureEntity':
			return List<PictureEntity>();			case 'PagePictureEntity':
			return List<PagePictureEntity>();			case 'PageableEntity':
			return List<PageableEntity>();			case 'PagePageable':
			return List<PagePageable>();			case 'PageSort':
			return List<PageSort>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}